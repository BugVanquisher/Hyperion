name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install -r requirements.txt

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Format check with black
      run: |
        black --check src/ tests/

    - name: Import sorting check with isort
      run: |
        isort --check-only src/ tests/

    - name: Run fast tests
      run: |
        pytest tests/ -v --tb=short -m "not slow and not integration and not load"

    - name: Run tests with coverage
      run: |
        pytest tests/ -m "not slow and not integration and not load" --cov=src --cov-report=xml --cov-report=term-missing

    - name: Run integration tests (if services available)
      run: |
        pytest tests/ -v -m "integration" --tb=short || echo "Integration tests skipped (services not available)"

    - name: Run performance tests
      run: |
        pytest tests/ -v -m "performance" --tb=short

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Security audit with safety
      run: |
        safety check --json || true

    - name: Security scan with bandit
      run: |
        bandit -r src/ -f json || true

  docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Check for Dockerfile
      id: dockerfile
      run: |
        if [ -f Dockerfile ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Build Docker image
      if: steps.dockerfile.outputs.exists == 'true'
      run: |
        docker build -t hyperion:latest .

    - name: Test Docker image
      if: steps.dockerfile.outputs.exists == 'true'
      run: |
        docker run --rm hyperion:latest python -c "import src.app.main; print('Docker build successful')"